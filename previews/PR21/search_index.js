var documenterSearchIndex = {"docs":
[{"location":"exp/#Running-an-experiment","page":"CO_2 Perturbation Experiment","title":"Running an experiment","text":"","category":"section"},{"location":"exp/#Generate-initial-equilibrium-condition","page":"CO_2 Perturbation Experiment","title":"Generate initial equilibrium condition","text":"","category":"section"},{"location":"exp/","page":"CO_2 Perturbation Experiment","title":"CO_2 Perturbation Experiment","text":"First use the MLM to calculate the steady-state clouds given an atmosphere with 400 ppm CO_2 and fix the SST at 290 K.","category":"page"},{"location":"exp/","page":"CO_2 Perturbation Experiment","title":"CO_2 Perturbation Experiment","text":"using MixedLayerModel\nusing OrdinaryDiffEq\nusing Plots\ninclude(\"../../experiments/mlm_solve_funcs.jl\")\n\n# run simulation\npar = upCO2();\npar.etype = enBal();\npar.fttype = co2EIS();\npar.rtype = varRad();\npar.stype = fixSST();\ndt = 12.0;\ntmax = 50.0;\nENV[\"GKSwstype\"]=\"nul\"\nu0, sol = run_mlm(par, dt=3600.0*dt, tspan=(0.0,3600.0*24.0*tmax));\nuf = sol.u[end];\n\n# plot #hide\nt = sol.t / 3600.0 / 24.0 #hide\nzi = getindex.(sol.u,1) #hide\nzb = calc_LCL.(sol.u) #hide\nsM = getindex.(sol.u,2) * 1e-3 #hide\nqtM = getindex.(sol.u,3) * 1e3 #hide\nSST = getindex.(sol.u,4) #hide\nCF = getindex.(sol.u,5) #hide\nLWP = incloud_LWP.(sol.u, zb) #hide\nplot(size=(600,500), layout=(5,1)) #hide\nplot!(t, zi, marker=\"o-\", label=\"\", subplot=1, ylabel=\"zi, zb [m]\") #hide\nplot!(t, zb, marker=\"o-\", subplot=1, label=\"\") #hide\nplot!(t, sM, marker=\"o-\", label=\"\", subplot=2, ylabel=\"sM [kJ/kg]\") #hide\nplot!(t, qtM, marker=\"o-\", label=\"\", subplot=3, ylabel=\"qtM [g/kg]\") #hide\nplot!(t, SST, marker=\"o-\", label=\"\", subplot=4, ylabel=\"SST [K]\") #hide\nplot!(t, CF*1e2, marker=\"o-\", label=\"\", subplot=5, ylabel=\"CF [%]\") #hide\nxaxis!(\"t (days)\", subplot=5) #hide","category":"page"},{"location":"exp/#Add-CO_2-with-fixed-SSTs","page":"CO_2 Perturbation Experiment","title":"Add CO_2 with fixed SSTs","text":"","category":"section"},{"location":"exp/","page":"CO_2 Perturbation Experiment","title":"CO_2 Perturbation Experiment","text":"Here we initialize the MLM from the steady-state condition with 400 ppm CO_2 and then calculate the new equilibrium state when we perturb the CO_2 to 800 ppm. In this example we still have fixed SSTs. ","category":"page"},{"location":"exp/","page":"CO_2 Perturbation Experiment","title":"CO_2 Perturbation Experiment","text":"using MixedLayerModel #hide\nusing OrdinaryDiffEq #hide\nusing Plots #hide\ninclude(\"../../experiments/mlm_solve_funcs.jl\") #hide\npar = upCO2(); #hide\npar.etype = enBal(); #hide\npar.fttype = co2EIS(); #hide\npar.rtype = varRad(); #hide\npar.stype = fixSST(); #hide\ndt = 12.0; #hide\ntmax = 50.0; #hide\nENV[\"GKSwstype\"]=\"nul\" #hide\nu0, sol = run_mlm(par, dt=3600.0*dt, tspan=(0.0,3600.0*24.0*tmax)); #hide\nuf = sol.u[end]; #hide\n\n# run simulation, 800 ppm\nnewCO2 = 800.0;\npar.CO2 = newCO2;\nu0, sol = run_mlm_from_init(uf, par, dt=3600.0*12.0, tspan=(0.0,3600.0*24.0*50.0));\n\n# plot #hide\nt = sol.t / 3600.0 / 24.0 #hide\nzi = getindex.(sol.u,1) #hide\nsM = getindex.(sol.u,2) * 1e-3 #hide\nqtM = getindex.(sol.u,3) * 1e3 #hide\nSST = getindex.(sol.u,4) #hide\nCF = getindex.(sol.u,5) #hide\nzb = calc_LCL.(sol.u) #hide\nLWP = incloud_LWP.(sol.u, zb) * 1e3 #hide\nplot(size=(600,900), layout=(6,1)) #hide\nplot!(t, zi, marker=\"o-\", legend=:topleft, subplot=1, label=\"zi(t) [m]\") #hide\nplot!(t, zb, marker=\"o-\", legend=:topleft, subplot=1, label=\"zb(t) [m]\") #hide\nplot!(t, sM, marker=\"o-\", legend=:topleft, subplot=2, label=\"sM(t) [kJ/kg]\") #hide\nplot!(t, qtM, marker=\"o-\", legend=:topleft, subplot=3, label=\"qtM(t) [g/kg]\") #hide\nplot!(t, LWP, marker=\"o-\", legend=:topleft, subplot=4, label=\"LWP(t) [g/m2]\") #hide\nplot!(t, SST, marker=\"o-\", legend=:topleft, subplot=5, label=\"SST(t) [K]\") #hide\nplot!(t, CF*100, marker=\"o-\", legend=:topleft, subplot=6, label=\"CF(t) [%]\") #hide\n\ntitle!(string(Int(newCO2))*\" (ppm)\", subplot=1) #hide\nxaxis!(\"t (days)\", subplot=6) #hide","category":"page"},{"location":"exp/#Add-CO_2-and-let-SSTs-dynamically-adjust","page":"CO_2 Perturbation Experiment","title":"Add CO_2 and let SSTs dynamically adjust","text":"","category":"section"},{"location":"exp/","page":"CO_2 Perturbation Experiment","title":"CO_2 Perturbation Experiment","text":"Instead if we want to allow SSTs to change interactively, then we can set the ocean heat uptake (OHU) to the value defined by the 400 ppm simulation. Also be sure to switch to varSST() mode.","category":"page"},{"location":"exp/","page":"CO_2 Perturbation Experiment","title":"CO_2 Perturbation Experiment","text":"using MixedLayerModel #hide\nusing OrdinaryDiffEq #hide\nusing Plots #hide\ninclude(\"../../experiments/mlm_solve_funcs.jl\") #hide\npar = upCO2(); #hide\npar.etype = enBal(); #hide\npar.fttype = co2EIS(); #hide\npar.rtype = varRad(); #hide\npar.stype = fixSST(); #hide\ndt = 12.0; #hide\ntmax = 50.0; #hide\nENV[\"GKSwstype\"]=\"nul\" #hide\nu0, sol = run_mlm(par, dt=3600.0*dt, tspan=(0.0,3600.0*24.0*tmax)); #hide\nuf = sol.u[end]; #hide\n\nzb = calc_LCL(uf);\nLWP = incloud_LWP(uf, zb);\nOHU = calc_OHU(uf, par, LWP, par.stype);\n\n# run simulation, 800 ppm\nnewCO2 = 800.0;\npar.CO2 = newCO2;\npar.OHU = OHU;\npar.stype = varSST();\nu0, sol = run_mlm_from_init(uf, par, dt=3600.0*12.0, tspan=(0.0,3600.0*24.0*50.0));\n\n# plot #hide\nt = sol.t / 3600.0 / 24.0 #hide\nzi = getindex.(sol.u,1) #hide\nsM = getindex.(sol.u,2) * 1e-3 #hide\nqtM = getindex.(sol.u,3) * 1e3 #hide\nSST = getindex.(sol.u,4) #hide\nCF = getindex.(sol.u,5) #hide\nzb = calc_LCL.(sol.u) #hide\nLWP = incloud_LWP.(sol.u, zb) * 1e3 #hide\nplot(size=(600,900), layout=(6,1)) #hide\nplot!(t, zi, marker=\"o-\", legend=:topleft, subplot=1, label=\"zi(t) [m]\") #hide\nplot!(t, zb, marker=\"o-\", legend=:topleft, subplot=1, label=\"zb(t) [m]\") #hide\nplot!(t, sM, marker=\"o-\", legend=:topleft, subplot=2, label=\"sM(t) [kJ/kg]\") #hide\nplot!(t, qtM, marker=\"o-\", legend=:topleft, subplot=3, label=\"qtM(t) [g/kg]\") #hide\nplot!(t, LWP, marker=\"o-\", legend=:topleft, subplot=4, label=\"LWP(t) [g/m2]\") #hide\nplot!(t, SST, marker=\"o-\", legend=:topleft, subplot=5, label=\"SST(t) [K]\") #hide\nplot!(t, CF*100, marker=\"o-\", legend=:topleft, subplot=6, label=\"CF(t) [%]\") #hide\n\ntitle!(string(Int(newCO2))*\" (ppm)\", subplot=1) #hide\nxaxis!(\"t (days)\", subplot=6) #hide","category":"page"},{"location":"ode_solver/#Solving-the-coupled-MLM-ODEs","page":"ODE Solver","title":"Solving the coupled MLM ODEs","text":"","category":"section"},{"location":"ode_solver/","page":"ODE Solver","title":"ODE Solver","text":"We want to solve the MLM in two scenarios: 1) from a specified initial steady-state condition or 2) from an arbitrary initial guess.","category":"page"},{"location":"ode_solver/#From-initial-condition","page":"ODE Solver","title":"From initial-condition","text":"","category":"section"},{"location":"ode_solver/","page":"ODE Solver","title":"ODE Solver","text":"In this first case, we are taking the steady-state solution from a prior simulation of some climate state (usually present-day CO_2 levels of 400 ppm) and perturbing the CO_2 and letting the system evolve to reach a new steady state. We will need to do using OrdinaryDiffEq to define the ODEProblem.","category":"page"},{"location":"ode_solver/","page":"ODE Solver","title":"ODE Solver","text":"This is one way we could code this with an explicit timestep of 5 hours, running for 10 days. We are using the ","category":"page"},{"location":"ode_solver/","page":"ODE Solver","title":"ODE Solver","text":"function run_mlm_from_init(u0, params; dt=3600.0*5.0, tspan=(0.0,3600.0*24.0*10.0))\n    prob = ODEProblem(mlm, u0, tspan, params);\n    @time begin\n        sol = solve(prob, Euler(), dt=dt, progress=true, progress_steps=50);\n    end\n    return u0, sol\nend","category":"page"},{"location":"ode_solver/#No-initial-condition","page":"ODE Solver","title":"No initial condition","text":"","category":"section"},{"location":"ode_solver/","page":"ODE Solver","title":"ODE Solver","text":"On the other hand, we sometimes may want to solve the MLM without having an initial condition in mind and we will need to make a good guess to start. We could do that as follows.","category":"page"},{"location":"ode_solver/","page":"ODE Solver","title":"ODE Solver","text":"function run_mlm(params; dt=3600.0*5.0, tspan=(0.0,3600.0*24.0*10.0))\n    zi0 = 1000.0\n    qtM0 = params.RHsurf * q_sat(0.0, params.SST0);\n    sM0 = MixedLayerModel.Cp * params.SST0 + MixedLayerModel.L0 * qtM0;\n    CF0 = 1.0;\n    u0 = [zi0, sM0, qtM0, CF0, params.SST0];\n    prob = ODEProblem(mlm, u0, tspan, params);\n    @time begin\n        sol = solve(prob, Euler(), dt=dt, progress=true, progress_steps=50);\n    end\n    return u0, sol\nend","category":"page"},{"location":"theory/#Mixed-Layer-Theory","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"","category":"section"},{"location":"theory/#Bulk-boundary-layers","page":"Mixed Layer Theory","title":"Bulk boundary layers","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The mixed-layer model (MLM) is based on the assumption that the boundary layer between the surface and inversion height z_i is well-mixed. With these assumptions the governing equations simplify to a set of coupled ODEs for the inversion height and two thermodynamic variables for the energy and the water in the system.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The two thermodynamic quantities (psi) we use are s = C_p T + gz - L_v q_l, the moist static energy, and q_t = q_v + q_l, the total water specific humidity. Fig. 1 shows a sketch of the profiles of moist static energy, total water specific humidity, relative humidity, and liquid water specific humidity from the surface into the free-troposphere. The cloud is indicated by the grey shading between altitudes z_b (diagnosed as the lifting condensation level) and z_i where relative humidity is equal to 100%.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"include(\"MakeDiagram.jl\") #hide","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"(Image: ) Fig. 1. Sketch of the vertical profiles of psi_1 and psi_2. The grey shading denotes where the cloud layer is predicted to form.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The temporal evolution of these is governed by a balance between turbulent fluxes at the surface and across the inversion, and a diabatic source term Delta F_psi.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"z_i fracdpsi_Mdt = V (psi_0 - psi_M ) + w_e (psi_+ - psi_M) - Delta F_psi","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The prognostic equation for inversion height is found by vertically integrating the continuity equation. ","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"We extend the traditional MLM from e.g. Bretherton and Wyant (1997) to couple it to a slab ocean to ensure a closed surface energy budget and a simple radiation scheme that includes the effects of CO_2 on cloud-top radiative cooling. We also add a prognostic equation for cloud fraction.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The sea surface temperature (SST) is found by a enforcing a closed surface energy budget. In this model we neglect precipitation (Delta F_q_t = 0).","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"beginaligned \n    fracdz_idt = w_e - Dz_i  \n    z_i fracds_Mdt = V (s_0 - s_M) + w_e (s_+ - s_M) - Delta R  rho  \n    z_i fracdq_tMdt = V (q_t0 - q_tM) + w_e (q_t+ - q_tM)  \n    C fracdSSTdt = (1-alpha) fracS_04 - LW_net - LHF - SHF - OHU \n    fracdCFdt = fracCF - CFtau_CF \nendaligned","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"To close these equations we must specify the cloud-top entrainment velocity (w_e) and the cloud-top radiative cooling (Delta R) as well as the functional form for the cloud fraction.","category":"page"},{"location":"theory/#Cloud-top-entrainment","page":"Mixed Layer Theory","title":"Cloud-top entrainment","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"There are two choices for the entrainment parameterization in this mixed-layer model.","category":"page"},{"location":"theory/#Energy-balance-entrainment","page":"Mixed Layer Theory","title":"Energy balance entrainment","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The first assumes that the entrainment velocity is such as to satisfy a steady-state energy balance.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"w_e = fracDelta R  rho_refDelta_i s_vl","category":"page"},{"location":"theory/#Buoyancy-flux-entrainment","page":"Mixed Layer Theory","title":"Buoyancy flux entrainment","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"This alternative described by Bretherton and Wyant (1997) as the ''minimal'' model calculates the entrainment velocity as being proportional to the average sub-cloud buoyancy flux and inversely proportional to the buoyancy jump across the inversion.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"w_e = frac25 A overlinelangle w s_v rangleDelta_i s_v","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"where s_v is the virtual dry static energy. ","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"This is solved via the method described in Appendix A of Bretherton and Wyant (1997) by splitting the buoyancy flux into two parts and solving each integral analytically and then inverting. ","category":"page"},{"location":"theory/#Radiation","page":"Mixed Layer Theory","title":"Radiation","text":"","category":"section"},{"location":"theory/#Surface-energy-balance","page":"Mixed Layer Theory","title":"Surface energy balance","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The surface energy budget equation can be written as,","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"fracd SSTdt = SW^down - SW^up + LW^down - LW^up- LHF - SHF - OHU","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"We linearize the shortwave terms as SW_net = a_SW + (1-CF) b_SW with a_SW and b_SW fit to the LES results from Schneider et al. (2019).","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"We approximate the net longwave radiation as constant LW_net = -30 W/m^2.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"Or we write the net longwave radiation as the difference of two blackbody terms","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"LW_net = sigma (SST - t)^4 - sigma SST^4","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"where t is proportional to the mixed-layer specific humidity because as the air becomes  more moist, the effective emission level gets closer to the surface. We use a  simple fit to LES data and write, t = 500 cdot qM where qM is in kg/kg. ","category":"page"},{"location":"theory/#Cloud-top-longwave-cooling","page":"Mixed Layer Theory","title":"Cloud-top longwave cooling","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The amount of longwave cooling at the cloud top is dependent on the infrared energy radiating up from the cloud and the infrared energy radiating back down from higher in the atmosphere.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"Delta R = epsilon_c sigma T(z_i)^4 - sigma (T(z_i) - Delta T_a)^4","category":"page"},{"location":"theory/#Effective-emissions-temperature-of-downwelling-longwave-radiation-to-cloud-top","page":"Mixed Layer Theory","title":"Effective emissions temperature of downwelling longwave radiation to cloud-top","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"Delta T_a = a_0 + a_1 ln left( fracCO_2400 right) + a_2 ln (q_t+)","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"This is an empirical fit to the LES results from Schneider et al. (2019). ","category":"page"},{"location":"theory/#Cloud-longwave-emissivity","page":"Mixed Layer Theory","title":"Cloud longwave emissivity","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"epsilon_c = 09 is assumed to be constant.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"It can be made a function of LWP: epsilon_cloud = 1 - exp(-LWPL_tau)","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"where LWP_tau = 7 g/m^2 is the optical thickness of the cloud. This is based on Stephens (1978b) equations 15 and 16, taking an intermediate value of the parameter a_0 = 015.","category":"page"},{"location":"theory/#Cloud-Fraction","page":"Mixed Layer Theory","title":"Cloud Fraction","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"We parameterize the cloud fraction as a function of the decoupling parameter, mathscrD = left( fracLHFDelta R right) left( fracz_i - z_bz_i right), inspired by Chung and Teixeira (2012).","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"Specifically, we use a smooth function  CF = CF_max - fracCF_max - CF_min1 + (19)exp(-m(mathscrD-mathscrD_crit))  where m=8 is a tunable parameter that sets the strength of the nonlinear feedback and mathscrD_crit=1 is the value of the stability parameter that corresponds to when cloud fraction is 90\\% depleted towards the minimum value.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"include(\"CloudFrac_vs_De.jl\") #hide","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"(Image: )","category":"page"},{"location":"theory/#Thermodynamics","page":"Mixed Layer Theory","title":"Thermodynamics","text":"","category":"section"},{"location":"theory/#Saturation-adjustment","page":"Mixed Layer Theory","title":"Saturation adjustment","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The liquid water specific humidity is determined according to a standard saturation adjustment procedure. Simply, the mass of condensed water is the excess total water specific humidity exceeding the saturation specific humidity. ","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"In this mixed-layer model, all thermodynamic equations are written in terms of liquid static energy s and total water specific humidity q_t. The temperature then is calculated implicitly by requiring that ","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"s = C_p T + gz - L_0 q_l.","category":"page"},{"location":"theory/#Lifting-condensation-level,-cloud-base","page":"Mixed Layer Theory","title":"Lifting condensation level, cloud base","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The cloud base is calculated as the lifting condensation level (LCL), which is a thermodynamic property depending only on the mixed-layer properties. The LCL is defined as the altitude z_b such that,","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"q_tM - q_sat(z T(z h_M q_tM)) = 0","category":"page"},{"location":"theory/#Liquid-water-path","page":"Mixed Layer Theory","title":"Liquid water path","text":"","category":"section"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"The liquid water path is the mass of condensed liquid water along a vertical path through the cloud, i.e.","category":"page"},{"location":"theory/","page":"Mixed Layer Theory","title":"Mixed Layer Theory","text":"LWP = int_z_b^z_i rho q_l(z) dz","category":"page"},{"location":"library/#Application-Programming-Interface-(APIs)","page":"APIs","title":"Application Programming Interface (APIs)","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Documenting the public user interface","category":"page"},{"location":"library/#Thermodynamics","page":"APIs","title":"Thermodynamics","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"Thermodynamics.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.calc_LCL-Tuple{Any}","page":"APIs","title":"MixedLayerModel.calc_LCL","text":"calc_LCL(u)\n\ncalculate the lifiting condensation level\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.incloud_LWP-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.incloud_LWP","text":"incloud_LWP(u)\n\ncalulcate the in-cloud liquid water path\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.moist_adiabat-Tuple{Any,Any,Any}","page":"APIs","title":"MixedLayerModel.moist_adiabat","text":"moist_adiabat(Tsurf, zft, p)\ncalculate moist adiabat given a surface temperature (Tsurf),\nup to an altitude zft, with the parameters p\n- first calculates the zLCL\n- then calculates the moist adiabatic profile with dz=10m up to zft\nreturns (T,z) profile\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.pres-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.pres","text":"pres(z, T)\n\nassumes hydrostatic balance\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.q_l-Tuple{Any,Any,Any}","page":"APIs","title":"MixedLayerModel.q_l","text":"q_l(z, T, qt)\n\nas difference between total specific humidity and saturation specific humidity\nif undersaturated, then ql=0\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.q_sat-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.q_sat","text":"q_sat(z, T)\n\nuses Clasius-Clapeyron relation with assumed constant \nlatent heat of vaporization term L0=2.5e6\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.rho-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.rho","text":"rho(z, T)    \n\ncalculate density given altitude and temperature\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.temp-Tuple{Any,Any,Any}","page":"APIs","title":"MixedLayerModel.temp","text":"temp(z, s, qt)\n\nuses saturation adjustment on the liquid water static energy (s)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.temp_ft-Tuple{Any,Any,Any}","page":"APIs","title":"MixedLayerModel.temp_ft","text":"calculate actual moist adiabat by integrating\ngo up dry adiabat to LCL and then saturated adiabat\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.Γs-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.Γs","text":"Γs - saturated adiabatic lapse rate\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.ρref-Tuple{Any}","page":"APIs","title":"MixedLayerModel.ρref","text":"ρref(T)    \n\ncalculate reference density given temperature\nand reference pressure pref\n\n\n\n\n\n","category":"method"},{"location":"library/#Surface-fluxes","page":"APIs","title":"Surface fluxes","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"SurfaceFluxes.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.Q_0-Tuple{Any,Any,fixFlux}","page":"APIs","title":"MixedLayerModel.Q_0","text":"define the surface moisture flux, Q_surf\ngiven prescribed latent heat flux\n\nQ_surf = LHF / (Lv * ρref)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.Q_0-Tuple{Any,Any,varFlux}","page":"APIs","title":"MixedLayerModel.Q_0","text":"define surface moisture flux, Q_surf\nusing bulk aerodynamic formula\n\nQ_surf = C * V * (q0 - q)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.S_0-Tuple{Any,Any,fixFlux}","page":"APIs","title":"MixedLayerModel.S_0","text":"define the surface liquid static energy flux, S_surf\ngiven prescribed sensible and latent heat fluxes\n\nS_surf = SHF / ρref\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.S_0-Tuple{Any,Any,varFlux}","page":"APIs","title":"MixedLayerModel.S_0","text":"define surface liquid static energy flux, S_surf\nusing bulk aerodynamic formula\n\nS_surf = C * V * (s0 - s)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.calc_LHF-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.calc_LHF","text":"calculate the latent heat flux\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.calc_SHF-Tuple{Any,Any}","page":"APIs","title":"MixedLayerModel.calc_SHF","text":"calculate the sensible heat flux\n\n\n\n\n\n","category":"method"},{"location":"library/#Top-fluxes","page":"APIs","title":"Top fluxes","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"TopFluxes.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.Q_zi-NTuple{4,Any}","page":"APIs","title":"MixedLayerModel.Q_zi","text":"Q_zi(u, p, ent, LWP)\n\nmoisture flux into the mixed-layer from above at z=zi\nQ_zi = -we * (qft - qM)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.S_zi-NTuple{4,Any}","page":"APIs","title":"MixedLayerModel.S_zi","text":"S_zi(u, p, ent, LWP)\n\nenergy flux into the mixed-layer from above at z=zi\nS_zi = -we * (sft - sM)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.qjump-Tuple{Any,Any,Any,Union{co2EIS, fixEIS, fixedFT}}","page":"APIs","title":"MixedLayerModel.qjump","text":"qjump(u, p, LWP, fttype::Union{twocol, fixEIS, fixedFT, co2EIS})\n\nspecific humidity above cloud given fixed RHft\nand saturation calculated at Tft\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.sjump-Tuple{Any,Any,Any,co2EIS}","page":"APIs","title":"MixedLayerModel.sjump","text":"sjump(u, p, LWP, p.fttype::co2EIS)\ndefines s+(z) in free troposphere given EIS and dTdz\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.sjump-Tuple{Any,Any,Any,fixEIS}","page":"APIs","title":"MixedLayerModel.sjump","text":"sjump(u, p, LWP, p.fttype::fixEIS)\ndefines s+(z) in free troposphere given EIS and dTdz\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.sjump-Tuple{Any,Any,Any,fixedFT}","page":"APIs","title":"MixedLayerModel.sjump","text":"sjump(u, p, LWP, p.fttype::fixedFT)\ndefines s+(z) in free troposphere -- given Gamma_s and Gamma_q\n\n\n\n\n\n","category":"method"},{"location":"library/#Radiation","page":"APIs","title":"Radiation","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"Radiation.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.calc_cloudtop_RAD-Tuple{Any,Any,Any,fixRad}","page":"APIs","title":"MixedLayerModel.calc_cloudtop_RAD","text":"calc_cloudtop_RAD(u, p, LWP, rtype::fixRad)\n\nreturns the prescribed cloud-top radiative cooling ΔR\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.calc_cloudtop_RAD-Tuple{Any,Any,Any,varRad}","page":"APIs","title":"MixedLayerModel.calc_cloudtop_RAD","text":"calc_cloudtop_RAD(u, p, LWP, rtype::varRad)\n\ncalculate the net ΔR at cloud-top based on CO2\nbalance between upwelling and downwelling longwave\ndownwelling longwave is based on an effective temperature\nwhich is empirically fit to LES\n\ngives ΔR ≈ 75 W/m2 for 400 ppm CO2\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.calc_surf_RAD-Tuple{Any,Any,Any}","page":"APIs","title":"MixedLayerModel.calc_surf_RAD","text":"calc_surf_RAD(u, p, LWP)\n\ncalculate net SW and LW radiation at the surface\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.cloud_albedo-Tuple{Any}","page":"APIs","title":"MixedLayerModel.cloud_albedo","text":"cloud_albedo(LWP)\n\nalbedo of the cloud given LWP in kg/m^2\nfit from LES experiments\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.cloud_emissivity-Tuple{Any}","page":"APIs","title":"MixedLayerModel.cloud_emissivity","text":"cloud_emissivity(LWP)\n\nemissivity of the cloud as a function of LWP in kg/m2\nϵ = 1 - exp(-a0 * LWP) with a0 = 0.15 m^2/g\n\nbased on Stephens 1978 part II: eq 15 and 16\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.ΔTa-Tuple{Any,Any,Any,wvON}","page":"APIs","title":"MixedLayerModel.ΔTa","text":"ΔTa(u, p, LWP, p.wvtype::wvON)\nwrites the difference between cloud-top temperature and downwelling emission\ntemperature as a function of CO2 and H2O above-cloud\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.ΔTa-Tuple{Any,Any,Any,wvRADOFF}","page":"APIs","title":"MixedLayerModel.ΔTa","text":"ΔTa(u, p, LWP, p.wvtype::wvRADOFF)\nwrites the difference between cloud-top temperature and downwelling emission\ntemperature as a function of CO2 \nH2O above-cloud is FIXED by p.qft_rad\n\n\n\n\n\n","category":"method"},{"location":"library/#Entrainment","page":"APIs","title":"Entrainment","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"Entrainment.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.sv_jump-Tuple{Any,Any,Any}","page":"APIs","title":"MixedLayerModel.sv_jump","text":"sv_jump(u, p, LWP)\n\nΔsv = Δs + CpΔTv - CpΔT\n    = Δs + Cp(Rv/Rd - 1)(Tft*qft - T_zi*qM) + Cp(Rv/Rd)(T_zi*ql_zi)\n\nTv = (Rd*(1-qt) + Rv*qv)/Rd * T\n\njump in virtual liquid static energy across inversion\nproportional to buoyancy jump\nused in energy balance entrainment\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.we-Tuple{Any,Any,Any,Any,bflux}","page":"APIs","title":"MixedLayerModel.we","text":"we(u, p, zb, LWP, etype::bflux)\n\nentrainment velocity based on buoyancy flux\nwithout radiation\n\nintegral is calculated analytically\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.we-Tuple{Any,Any,Any,Any,enBal}","page":"APIs","title":"MixedLayerModel.we","text":"we(u, p, zb, LWP, etype::enBal)\n\nentrainment velocity obtained via energy balance requirement\nw = ΔR / (Δsv * ρref)\nΔsv = the jump in virtual liquid static energy\nsv = Cp*Tv + g*z - Lv*ql = s + Cp(Tv - T)\n\n\n\n\n\n","category":"method"},{"location":"library/#Cloud-fraction","page":"APIs","title":"Cloud fraction","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"CloudFraction.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.calc_decoupling-NTuple{4,Any}","page":"APIs","title":"MixedLayerModel.calc_decoupling","text":"calc_decoupling(u, p)\n\ncalculates the stability parameter, s\nalso called the minimal decloupling parameter\nin Bretherton and Wyant (1997)\nDe = (LHF / ΔR) * (zc / zi)\nwhere zc is the cloud thickness (zi-zb)\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.cloud_fraction-NTuple{4,Any}","page":"APIs","title":"MixedLayerModel.cloud_fraction","text":"cloud_fraction(u, p, zb, LWP)\n\ncalculates the cloud fraction \ninspired by Chung et al 2012\nuses a logistic function to smoothly interpolate between \n100% and 20% cloud fraction based on the value of the\nstability parameter\n\n\n\n\n\n","category":"method"},{"location":"library/#MLM-ODE","page":"APIs","title":"MLM ODE","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"MLMode.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.mlm-NTuple{4,Any}","page":"APIs","title":"MixedLayerModel.mlm","text":"mlm(du, u, p, t)    \n\ndefine the coupled ODE\n  dzi/dt = we - D*zi\n  dsM/dt = -dE/dz = -1/zi * (Szi - S0 + dR/rho)\n  dqM/dt = -dW/dz = -1/zi * (Qzi - Q0)\n  dSST/dt = (SWnet - LWnet - SHF - LHF - OHU) / τ_SST\n  dCF/dt = (CF' - CF) / τ_CF\n\n\n\n\n\n","category":"method"},{"location":"library/#Diagnostics","page":"APIs","title":"Diagnostics","text":"","category":"section"},{"location":"library/","page":"APIs","title":"APIs","text":"Modules = [MixedLayerModel]\nPrivate = false\nPages   = [\"Diagnostics.jl\"]","category":"page"},{"location":"library/#MixedLayerModel.calc_OHU-Tuple{Any,Any,Any,fixSST}","page":"APIs","title":"MixedLayerModel.calc_OHU","text":"calc_OHU(u, p, p.stype::fixSST)\n\nu is the state vector [zi, sM, qM, SST, CF]\np is the parameter object\n\ncalculates the ocean heat uptake as the residual \nbetween the radiative fluxes and the LHF + SHF\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.calc_OHU-Tuple{Any,Any,Any,varSST}","page":"APIs","title":"MixedLayerModel.calc_OHU","text":"calc_OHU(u, p, p.stype::varSST)\n\nu is the state vector [zi, sM, qM, SST, CF]\np is the parameter object\n\nreturns p.OHU\n\n\n\n\n\n","category":"method"},{"location":"library/#MixedLayerModel.calc_bflux-Tuple{Any,Any,Any,bflux}","page":"APIs","title":"MixedLayerModel.calc_bflux","text":"calc_bflux(u, p, zarr, etype::bflux)\n\nu is the state vector [zi, sM, qM, SST, CF]\np is the parameter object\nzarr is an array of altitudes from 0 to some maxz > zi\n\ncalculates the buoyancy flux for plotting\n\n\n\n\n\n","category":"method"},{"location":"#MixedLayerModel.jl","page":"Home","title":"MixedLayerModel.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MixedLayerModel","category":"page"},{"location":"","page":"Home","title":"Home","text":"MixedLayerModel.jl is a library for making generic mixed layer models for the atmosphere and subtropical stratocumulus clouds. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documented in Singer and Schneider (2023a, in review) and Singer and Schneider (2023b, in review).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Visit on github: MixedLayerModel.jl","category":"page"}]
}
